diff --git a/node_modules/medium-draft/lib/components/blocks/iframe.js b/node_modules/medium-draft/lib/components/blocks/iframe.js
new file mode 100644
index 0000000..c948f5d
--- /dev/null
+++ b/node_modules/medium-draft/lib/components/blocks/iframe.js
@@ -0,0 +1,190 @@
+'use strict'
+
+Object.defineProperty(exports, '__esModule', {
+  value: true,
+})
+
+var _createClass = (function () {
+  function defineProperties(target, props) {
+    for (var i = 0; i < props.length; i++) {
+      var descriptor = props[i]
+      descriptor.enumerable = descriptor.enumerable || false
+      descriptor.configurable = true
+      if ('value' in descriptor) descriptor.writable = true
+      Object.defineProperty(target, descriptor.key, descriptor)
+    }
+  }
+  return function (Constructor, protoProps, staticProps) {
+    if (protoProps) defineProperties(Constructor.prototype, protoProps)
+    if (staticProps) defineProperties(Constructor, staticProps)
+    return Constructor
+  }
+})()
+
+var _propTypes = require('prop-types')
+
+var _propTypes2 = _interopRequireDefault(_propTypes)
+
+var _react = require('react')
+
+var _react2 = _interopRequireDefault(_react)
+
+var _draftJs = require('draft-js')
+
+var _model = require('../../model/')
+
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj }
+}
+
+function _classCallCheck(instance, Constructor) {
+  if (!(instance instanceof Constructor)) {
+    throw new TypeError('Cannot call a class as a function')
+  }
+}
+
+function _possibleConstructorReturn(self, call) {
+  if (!self) {
+    throw new ReferenceError(
+      "this hasn't been initialised - super() hasn't been called",
+    )
+  }
+  return call && (typeof call === 'object' || typeof call === 'function')
+    ? call
+    : self
+}
+
+function _inherits(subClass, superClass) {
+  if (typeof superClass !== 'function' && superClass !== null) {
+    throw new TypeError(
+      'Super expression must either be null or a function, not ' +
+        typeof superClass,
+    )
+  }
+  subClass.prototype = Object.create(superClass && superClass.prototype, {
+    constructor: {
+      value: subClass,
+      enumerable: false,
+      writable: true,
+      configurable: true,
+    },
+  })
+  if (superClass)
+    Object.setPrototypeOf
+      ? Object.setPrototypeOf(subClass, superClass)
+      : (subClass.__proto__ = superClass)
+}
+
+var IframeBlock = (function (_React$Component) {
+  _inherits(IframeBlock, _React$Component)
+
+  function IframeBlock() {
+    var _ref
+
+    var _temp, _this, _ret
+
+    _classCallCheck(this, IframeBlock)
+
+    for (
+      var _len = arguments.length, args = Array(_len), _key = 0;
+      _key < _len;
+      _key++
+    ) {
+      args[_key] = arguments[_key]
+    }
+
+    return (
+      (_ret =
+        ((_temp =
+          ((_this = _possibleConstructorReturn(
+            this,
+            (_ref =
+              IframeBlock.__proto__ ||
+              Object.getPrototypeOf(IframeBlock)).call.apply(
+              _ref,
+              [this].concat(args),
+            ),
+          )),
+          _this)),
+        (_this.focusBlock = function () {
+          var _this$props = _this.props,
+            block = _this$props.block,
+            blockProps = _this$props.blockProps
+          var getEditorState = blockProps.getEditorState,
+            setEditorState = blockProps.setEditorState
+
+          var key = block.getKey()
+          var editorState = getEditorState()
+          var currentblock = (0, _model.getCurrentBlock)(editorState)
+          if (currentblock.getKey() === key) {
+            return
+          }
+          var newSelection = new _draftJs.SelectionState({
+            anchorKey: key,
+            focusKey: key,
+            anchorOffset: 0,
+            focusOffset: 0,
+          })
+          setEditorState(
+            _draftJs.EditorState.forceSelection(editorState, newSelection),
+          )
+        }),
+        _temp)),
+      _possibleConstructorReturn(_this, _ret)
+    )
+  }
+
+  _createClass(IframeBlock, [
+    {
+      key: 'render',
+      value: function render() {
+        var _props = this.props,
+          blockProps = _props.blockProps,
+          block = _props.block
+
+        var data = block.getData()
+        var src = data.get('src')
+        var showPlaceholder = block.getLength() === 0 && blockProps.placeholder
+
+        if (src !== null) {
+          var extraProps = {}
+
+          if (showPlaceholder) {
+            extraProps['data-placeholder'] = blockProps.placeholder
+            extraProps.className = 'md-block-image-caption--empty'
+          }
+
+          return _react2.default.createElement(
+            'div',
+            null,
+            _react2.default.createElement(
+              'div',
+              {
+                className: 'md-block-image-inner-container',
+                onClick: this.focusBlock,
+              },
+              _react2.default.createElement('iframe', {
+                //role: 'presentation',
+                src: src,
+              }),
+            ),
+            _react2.default.createElement(
+              'figcaption',
+              extraProps,
+              _react2.default.createElement(_draftJs.EditorBlock, this.props),
+            ),
+          )
+        }
+        return _react2.default.createElement(_draftJs.EditorBlock, this.props)
+      },
+    },
+  ])
+
+  return IframeBlock
+})(_react2.default.Component)
+
+IframeBlock.propTypes = {
+  block: _propTypes2.default.object,
+  blockProps: _propTypes2.default.object,
+}
+exports.default = IframeBlock
diff --git a/node_modules/medium-draft/lib/components/customrenderer.js b/node_modules/medium-draft/lib/components/customrenderer.js
index a0fe47d..9c4dd5c 100644
--- a/node_modules/medium-draft/lib/components/customrenderer.js
+++ b/node_modules/medium-draft/lib/components/customrenderer.js
@@ -4,6 +4,10 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 
+var _react = require('react');
+
+var _react2 = _interopRequireDefault(_react);
+
 var _blockquotecaption = require('./blocks/blockquotecaption');
 
 var _blockquotecaption2 = _interopRequireDefault(_blockquotecaption);
@@ -24,6 +28,9 @@ var _image = require('./blocks/image');
 
 var _image2 = _interopRequireDefault(_image);
 
+var _iframe = require('./blocks/iframe');
+var _iframe2 = _interopRequireDefault(_iframe);
+
 var _break = require('./blocks/break');
 
 var _break2 = _interopRequireDefault(_break);
@@ -75,6 +82,15 @@ exports.default = function (setEditorState, getEditorState, extraProps) {
           component: _break2.default,
           editable: false
         };
+      case _constants.Block.IFRAME:
+        return {
+            component: _iframe2.default,
+            props: {
+                setEditorState: setEditorState,
+                getEditorState: getEditorState,
+                placeholder: extraProps ? extraProps.imageCaptionPlaceholder : ''
+            }
+        };
       default:
         return null;
     }
diff --git a/node_modules/medium-draft/lib/exporter.js b/node_modules/medium-draft/lib/exporter.js
index 51c8f15..1caf56a 100644
--- a/node_modules/medium-draft/lib/exporter.js
+++ b/node_modules/medium-draft/lib/exporter.js
@@ -63,6 +63,16 @@ var blockToHTML = exports.blockToHTML = function blockToHTML(block) {
         start: '<p class="md-block-' + blockClass + '"><caption>',
         end: '</caption></p>'
       };
+    case _constants.Block.IFRAME:
+        {
+            var imgData = block.data;
+            var text = block.text;
+            var extraClass = text.length > 0 ? ' md-block-image-has-caption' : '';
+            return {
+                start: '<figure class="md-block-iframe' + extraClass + '"><iframe src="' + imgData.src + '"></iframe><figcaption class="md-block-image-caption">',
+                end: '</figcaption></figure>'
+            };
+    }
     case _constants.Block.IMAGE:
       {
         var imgData = block.data;
diff --git a/node_modules/medium-draft/lib/importer.js b/node_modules/medium-draft/lib/importer.js
index 63aaa41..bdcd506 100644
--- a/node_modules/medium-draft/lib/importer.js
+++ b/node_modules/medium-draft/lib/importer.js
@@ -85,6 +85,20 @@ var htmlToBlock = exports.htmlToBlock = function htmlToBlock(nodeName, node) {
           src: imageNode && imageNode.src
         }
       };
+    }
+    else if (node.className.match(/^md-block-iframe/)) {
+        var iframeNode = node.querySelector('iframe')
+        var src = iframeNode && iframeNode.src
+
+        if (!src || src.slice(0, 28) !== 'https://embed.santiment.net/')
+            return undefined
+
+        return {
+            type: _constants.Block.IFRAME,
+            data: {
+                src: src,
+            },
+        }
     } else if (node.className === 'md-block-' + _constants.Block.ATOMIC.toLowerCase()) {
       return {
         type: _constants.Block.ATOMIC,
diff --git a/node_modules/medium-draft/lib/util/blockStyleFn.js b/node_modules/medium-draft/lib/util/blockStyleFn.js
index 3a31b31..1f5daa8 100644
--- a/node_modules/medium-draft/lib/util/blockStyleFn.js
+++ b/node_modules/medium-draft/lib/util/blockStyleFn.js
@@ -30,6 +30,8 @@ exports.default = function (block) {
         finalClass += BASE_BLOCK_CLASS + '-todo ' + checkedClass;
         return finalClass;
       }
+    case _constants.Block.IFRAME:
+        return BASE_BLOCK_CLASS + ' ' + BASE_BLOCK_CLASS + '-iframe';
     case _constants.Block.IMAGE:
       return BASE_BLOCK_CLASS + ' ' + BASE_BLOCK_CLASS + '-image';
     case _constants.Block.BLOCKQUOTE_CAPTION:
diff --git a/node_modules/medium-draft/lib/util/constants.js b/node_modules/medium-draft/lib/util/constants.js
index 51e3381..d27e757 100644
--- a/node_modules/medium-draft/lib/util/constants.js
+++ b/node_modules/medium-draft/lib/util/constants.js
@@ -1,14 +1,14 @@
-'use strict';
+'use strict'
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
+Object.defineProperty(exports, '__esModule', {
+  value: true,
+})
 /*
 Some of the constants which are used throughout this project instead of
 directly using string.
 */
 
-var Block = exports.Block = {
+var Block = (exports.Block = {
   UNSTYLED: 'unstyled',
   PARAGRAPH: 'unstyled',
   OL: 'ordered-list-item',
@@ -26,52 +26,55 @@ var Block = exports.Block = {
   BLOCKQUOTE_CAPTION: 'block-quote-caption',
   CAPTION: 'caption',
   TODO: 'todo',
+  IFRAME: 'atomic:iframe',
   IMAGE: 'atomic:image',
-  BREAK: 'atomic:break'
-};
+  BREAK: 'atomic:break',
+})
 
-var Inline = exports.Inline = {
+var Inline = (exports.Inline = {
   BOLD: 'BOLD',
   CODE: 'CODE',
   ITALIC: 'ITALIC',
   STRIKETHROUGH: 'STRIKETHROUGH',
   UNDERLINE: 'UNDERLINE',
-  HIGHLIGHT: 'HIGHLIGHT'
-};
+  HIGHLIGHT: 'HIGHLIGHT',
+})
 
-var Entity = exports.Entity = {
-  LINK: 'LINK'
-};
+var Entity = (exports.Entity = {
+  LINK: 'LINK',
+})
 
-var HYPERLINK = exports.HYPERLINK = 'hyperlink';
-var HANDLED = exports.HANDLED = 'handled';
-var NOT_HANDLED = exports.NOT_HANDLED = 'not_handled';
+var HYPERLINK = (exports.HYPERLINK = 'hyperlink')
+var HANDLED = (exports.HANDLED = 'handled')
+var NOT_HANDLED = (exports.NOT_HANDLED = 'not_handled')
 
-var KEY_COMMANDS = exports.KEY_COMMANDS = {
+var KEY_COMMANDS = (exports.KEY_COMMANDS = {
   addNewBlock: function addNewBlock() {
-    return 'add-new-block';
+    return 'add-new-block'
   },
   changeType: function changeType() {
-    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
-    return 'changetype:' + type;
+    var type =
+      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ''
+    return 'changetype:' + type
   },
   showLinkInput: function showLinkInput() {
-    return 'showlinkinput';
+    return 'showlinkinput'
   },
   unlink: function unlink() {
-    return 'unlink';
+    return 'unlink'
   },
   toggleInline: function toggleInline() {
-    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
-    return 'toggleinline:' + type;
+    var type =
+      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ''
+    return 'toggleinline:' + type
   },
   deleteBlock: function deleteBlock() {
-    return 'delete-block';
-  }
-};
+    return 'delete-block'
+  },
+})
 
 exports.default = {
   Block: Block,
   Inline: Inline,
-  Entity: Entity
-};
\ No newline at end of file
+  Entity: Entity,
+}
diff --git a/node_modules/medium-draft/lib/util/rendermap.js b/node_modules/medium-draft/lib/util/rendermap.js
index 11b17a8..3882a6c 100644
--- a/node_modules/medium-draft/lib/util/rendermap.js
+++ b/node_modules/medium-draft/lib/util/rendermap.js
@@ -23,6 +23,8 @@ var RenderMap = (0, _immutable.Map)((_Map = {}, _defineProperty(_Map, _constants
   element: 'blockquote'
 }), _defineProperty(_Map, _constants.Block.TODO, {
   element: 'div'
+}), _defineProperty(_Map, _constants.Block.IFRAME, {
+  element: 'figure'
 }), _defineProperty(_Map, _constants.Block.IMAGE, {
   element: 'figure'
 }), _defineProperty(_Map, _constants.Block.BREAK, {
